# Generated by Django 5.0.13 on 2025-04-25 20:10

import apps.users.managers.user_manager
import apps.users.validators.username
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('first_name', models.CharField(max_length=60, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=60, verbose_name='Last Name')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='Email Address')),
                ('username', models.CharField(max_length=60, unique=True, validators=[apps.users.validators.username.UsernameValidator], verbose_name='Username')),
                ('avatar', models.ImageField(blank=True, help_text='User avatar image', null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', apps.users.managers.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserActivationToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uid', models.CharField(max_length=255, verbose_name='User ID')),
                ('token', models.CharField(max_length=255, verbose_name='Activation Token')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activation_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Activation Token',
                'verbose_name_plural': 'User Activation Tokens',
                'db_table': 'users_user_activation_token',
                'ordering': ['-created_at'],
                'unique_together': {('uid', 'token')},
            },
        ),
        migrations.CreateModel(
            name='UserDeletionToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uid', models.CharField(max_length=255, verbose_name='User ID')),
                ('token', models.CharField(max_length=255, verbose_name='Deletion Token')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deletion_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Deletion Token',
                'verbose_name_plural': 'User Deletion Tokens',
                'db_table': 'users_user_deletion_token',
                'ordering': ['-created_at'],
                'unique_together': {('uid', 'token')},
            },
        ),
        migrations.CreateModel(
            name='UserPasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uid', models.CharField(max_length=255, verbose_name='User ID')),
                ('token', models.CharField(max_length=255, verbose_name='Password Reset Token')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Password Reset Token',
                'verbose_name_plural': 'User Password Reset Tokens',
                'db_table': 'users_user_password_reset_token',
                'ordering': ['-created_at'],
                'unique_together': {('uid', 'token')},
            },
        ),
    ]
