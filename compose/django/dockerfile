# Define an alias for the specific python version used in this file.
FROM docker.io/python:3.12.3-slim-bookworm AS python


# Python build stage
FROM python AS python-build-stage


# Install apt packages required for building Python packages and psycopg dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*


# Copy requirements files to the build stage
COPY ./backend/requirements.txt .


# Create Python Dependency and Sub-Dependency Wheels
RUN pip wheel --wheel-dir /usr/src/app/wheels -r requirements.txt


# Python 'run' stage
FROM python AS python-run-stage


# Define arguments for application home directory
ARG APP_HOME=/app


# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONFAULTHANDLER=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.7.1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_CACHE_DIR='/var/cache/pypoetry'


# Create a non-root user to run the application
RUN addgroup --system django \
    && adduser --system --ingroup django django


# Set working directory and give ownership to django user
WORKDIR ${APP_HOME}
RUN chown django:django ${APP_HOME}


# Install required system dependencies - combine all apt operations
RUN apt-get update && apt-get install --no-install-recommends -y \
    libpq-dev \
    gettext \
    curl \
    wget \
    git \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && rm -rf /var/lib/apt/lists/*


# Copy python dependency wheels from python-build-stage
COPY --from=python-build-stage /usr/src/app/wheels /wheels/


# Use wheels to install python dependencies
RUN pip install --no-cache-dir --no-index --find-links=/wheels/ /wheels/* \
    && rm -rf /wheels/


# Copy scripts and set permissions - combine operations to reduce layers
COPY ./compose/django/entrypoint /entrypoint
COPY ./compose/django/start /start
COPY ./compose/django/celery/worker/start /start-celeryworker
COPY ./compose/django/celery/beat/start /start-celerybeat
COPY ./compose/django/celery/flower/start /start-flower


RUN sed -i 's/\r$//g' /entrypoint /start /start-celeryworker /start-celerybeat /start-flower \
    && chmod +x /entrypoint /start /start-celeryworker /start-celerybeat /start-flower


# Copy application code to WORKDIR
COPY --chown=django:django ./backend ${APP_HOME}


# Update the current working directory to the backend directory
WORKDIR ${APP_HOME}


# Switch to non-root user for better security
USER django


# Define entrypoint
ENTRYPOINT ["/entrypoint"]
