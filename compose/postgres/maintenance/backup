#!/usr/bin/env bash

# Create a database backup.
#
# Usage:
#     $ docker compose -f <environment>.yml (exec |run --rm) postgres backup

# Exit on error, undefined variables, and pipe failures
set -o errexit
set -o pipefail
set -o nounset

# Get the directory of the current script
working_dir="$(dirname ${0})"

# Source required scripts
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

# Display welcome message
message_welcome "Backing up the '${POSTGRES_DB}' database..."

# Check if running as postgres user
if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Backing up as 'postgres' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
    exit 1
fi

# Set PostgreSQL environment variables
export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

# Generate backup filename with timestamp
backup_filename="${BACKUP_FILE_PREFIX}_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"

# Create compressed backup
pg_dump | gzip > "${BACKUP_DIR_PATH}/${backup_filename}"

# Display success message
message_success "'${POSTGRES_DB}' database backup '${backup_filename}' has been created and placed in '${BACKUP_DIR_PATH}'."
